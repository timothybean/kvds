package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/noranetworks/kvds/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text: input.Text,
		ID:   fmt.Sprintf("T%d", randNumber),
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Config is the resolver for the config field.
/* func (r *queryResolver) Config(ctx context.Context) (*model.Config, error) {
	var config *model.Config = &model.Config{}
	c, err := r.Core.Api.OnConfigGlobalGet()
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(c, config)
	if err != nil {
		fmt.Println(err.Error())
		return nil, err
	}

	return config, nil
} */

// Groups is the resolver for the groups field.
/* func (r *queryResolver) Groups(ctx context.Context) ([]*model.Group, error) {
	var groups []*model.Group = make([]*model.Group, 100)
	c, err := r.Core.Api.OnConfigGetGroups()
	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(c, *groups[0])
	if err != nil {
		fmt.Println(err.Error())
		return nil, err
	}

	return groups, nil
} */

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
//func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
